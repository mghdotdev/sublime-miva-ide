import sublime, sublime_plugin
import json
import re
import os
from os.path import dirname, realpath

# Define Path to JSON Cache
__FUNCTIONS_MERCHANT_PATH__ = dirname(realpath(__file__)) + os.sep + '/functions-merchant.json'

class MvDoCompletions(sublime_plugin.EventListener):
	"""
	MvDO File / Function Attribute Completions
	| Smartly determine which "Functions" to autocomplete based on chosen "File"
	| <mvt:do file="g.Module_Library_DB" value="Product_Load_ID(), Category_Load_ID() ..." />
	"""
	def __init__(self):
		self.functions_merchant_data = self.read_data_file(__FUNCTIONS_MERCHANT_PATH__)
		self.quick_panel_data = {}


	def on_query_completions(self, view, prefix, locations):
		
		previousPoint = max(0, locations[0] - 1)

		# Only trigger in a Function File Ender
		if not view.match_selector( previousPoint, 'text.mv source.mv.expr function-file.mv puncuation.terminator.function-file.mv' ):
			return []

		if view.match_selector( previousPoint, 'text.mv source.mv.expr function-file.mv puncuation.terminator.function-file.mv' ):
			mvtdo_attribute = 'value'

		return self.get_completions( view, prefix, locations, mvtdo_attribute )


	def get_completions( self, view, prefix, locations, mvtdo_attribute ):
		
		completion_list = []

		if (mvtdo_attribute == 'file'):
			completion_list = self.get_file_completions( view, locations[0], prefix )

		elif (mvtdo_attribute == 'value'):
			file_attribute_val = self.get_current_file_attribute_val( view, locations[0], prefix )
			completion_list = self.get_value_completions( view, locations[0], prefix, file_attribute_val )

		return ( completion_list, sublime.INHIBIT_WORD_COMPLETIONS | sublime.INHIBIT_EXPLICIT_COMPLETIONS )

	"""
	Custom Methods
	"""
	def read_data_file( self, path ):
		with open( path ) as data_file:
			data = json.load( data_file )
		return data
		

	def get_file_completions(self, view, pt, prefix):
		file_completions = [ ( file['distro_path'] + '\tFile', file['distro_path'].replace('$', '\\$') ) for file in self.functions_merchant_data ]
		return set(file_completions)


	def get_value_completions(self, view, pt, prefix, file_attribute_val):
		value_completions = []

		for file in self.functions_merchant_data:
			if (file_attribute_val == file['distro_path'] or file_attribute_val == ''):
				for function in file['functions']:
					parameters = self.build_function_parameters(function['parameters'])
					value_completions.append( (function['name'] + '\tFunc', function['name'] + parameters) )

		return set(value_completions)


	def build_function_parameters(self, parameters):
		if (len(parameters) == 0):
			return '()'

		parameters_map = []
		count = 0
		for parameter in parameters:
			count += 1
			if (count == len(parameters)):
				count = 0
			parameters_map.append( '${' + str(count) + ':' + parameter + '}' )

		sep = ', '
		return '( ' + sep.join(parameters_map) + ' )'



	def get_current_file_attribute_val(self, view, pt, prefix):
		
		"""
		TODO :: RECODE
		"""

		return ''
